


-----PARA NUMEROS------

.toFixed(num): redondea el número a los decimales indicados. Ej. 23.2376.toFixed(2) devuelve 23.24 
.toLocaleString(): devuelve el número convertido al formato local. 
isNaN(valor): nos dice si el valor pasado es un número (false), o no (true) 
isFinite(valor): devuelve true si el valor es finito (no es Infinity ni -Infinity). 
parseInt(valor): convierte el valor pasado a un número entero. Siempre que comience por un número la conversión se podrá hacer. 

-----PARA STRING------
.length: devuelve la longitud de una cadena. Ej.: 'Hola mundo'.length devuelve 10 
.charAt(posición): 'Hola mundo'.charAt(0) devuelve ‘H’ 
.indexOf(carácter): 'Hola mundo'.indexOf('o') devuelve 1. Si no se encuentra devuelve -1 
.lastIndexOf(carácter): 'Hola mundo'.lastIndexOf('o') devuelve 9 
.substring(desde, hasta): 'Hola mundo'.substring(2,4) devuelve ‘la’ 
.substr(desde, num caracteres): 'Hola mundo'.substr(2,4) devuelve ‘la m’ 
.replace(busco, reemplaza): 'Hola mundo'.replace('Hola', 'Adiós') devuelve ‘Adiós mundo’ 
.toLocaleLowerCase(): 'Hola mundo'.toLocaleLowerCase() devuelve ‘hola mundo’ 
.toLocaleUpperCase(): 'Hola mundo'.toLocaleUpperCase() devuelve ‘HOLA MUNDO’ 
.localeCompare(cadena): devuelve -1 si la cadena a que se aplica el método es anterior alfabéticamente a ‘cadena’, 1 si es posterior y 0 si ambas son iguales. Tiene en cuenta caracteres locales como acentos ñ, ç, 
.trim(cadena): ' Hola mundo '.trim() devuelve ‘Hola mundo’ 
.startsWith(cadena): 'Hola mundo'.startsWith('Hol') devuelve true 
.endsWith(cadena): 'Hola mundo'.endsWith('Hol') devuelve false 
.includes(cadena): 'Hola mundo'.includes('mun') devuelve true 
.repeat(veces): 'Hola mundo'.repeat(3) devuelve ‘Hola mundoHola mundoHola mundo’ 
.split(sepadaror): 'Hola mundo'.split(' ') devuelve  el  array  [‘Hola’,  ‘mundo’]. 'Hola mundo'.split('') devuelve el array [‘H’, ‘o’, ‘l’, ‘a’, ‘ ‘, ‘m’, ‘u’, ‘n’, ‘d’, ‘o’]



-----IMPRIMIR LITERALES-------
console.log(`El usuario tiene: ${edad} años`) ;


--------FUNCIONES FLECHA-----------
sintaxis de una arrow function lo que hacemos es: 
• Eliminamos la palabra function 
• Si sólo tiene 1 parámetro podemos eliminar los paréntesis de los parámetros 
• Ponemos el símbolo => 
• Si la función sólo tiene 1 línea podemos eliminar las { } y la palabra return

let resultado = (base, exponente) => base ** exponente;



-------------TRY CATCH-------------
   try {
        console.log(pepe);
      } catch (error) {
        console.log("Error en variable no definida");
        console.error("Error en variable no definida"); //Lo imprime en rojo
        console.log (error); //Imprime el tipo de error
      }finally{
        console.log("Esto se ejecuta siempre");
      }


Tambien se puede lanzar desde la funcion:
if (saldo < cantidad) { 
    throw 'Saldo insuficiente' 
}

try { 
  *********; 
} catch (err) { 
  console.log(err); // muestra "Saldo Insuficiente" 
}